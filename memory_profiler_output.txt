

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
     6   65.766 MiB 32122.469 MiB        1173   @profile
     7                                         def sample_henyey_greenstein(g, generator):
     8   65.766 MiB -45020.250 MiB        1173       rand = generator.uniform(0.0, 1.0)
     9                                         
    10   65.766 MiB -45020.406 MiB        1173       if g == 0:
    11                                                 cos_theta = 2 * rand - 1
    12                                             else:
    13   65.766 MiB -45020.547 MiB        1173           sqr_term = (1 - g * g) / (1 - g + 2 * g * rand)
    14   65.766 MiB -45020.641 MiB        1173           cos_theta = (1 + g * g - sqr_term * sqr_term) / (2 * g)
    15                                         
    16   65.766 MiB -45020.812 MiB        1173       theta = np.arccos(cos_theta)
    17                                         
    18   65.766 MiB -45021.047 MiB        1173       sign = generator.choice([-1, 1])
    19   65.766 MiB -45021.312 MiB        1173       phi = theta * sign
    20                                         
    21   65.766 MiB -45021.422 MiB        1173       return phi


Filename: benchmark_script.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    23   65.766 MiB 32122.500 MiB        1173   @profile
    24                                         def update_photon_angle(current_angle, g, generator):
    25   65.766 MiB 32121.344 MiB        1173       deflection = sample_henyey_greenstein(g, generator)
    26   65.766 MiB -45021.734 MiB        1173       new_angle = current_angle + deflection
    27   65.766 MiB -45021.828 MiB        1173       new_angle = new_angle % (2 * np.pi)
    28                                         
    29   65.766 MiB -45021.922 MiB        1173       if new_angle < 0:
    30                                                 new_angle += 2 * np.pi
    31                                         
    32   65.766 MiB -45022.078 MiB        1173       return new_angle


Filename: benchmark_script.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    34   65.766 MiB 27455.750 MiB        1005   @profile
    35                                         def photon_emitter(angle, v, sca_length, abs_length, init_coords, sensor_centers, sensor_r, g, generator, detec_x, detec_y):
    36   65.766 MiB -38638.438 MiB        1005       total_time = 0
    37   65.766 MiB -38638.438 MiB        1005       init_x, init_y = init_coords[0], init_coords[1]
    38   65.766 MiB -38638.438 MiB        1005       traj_x, traj_y = [init_x], [init_y]
    39   65.766 MiB -38638.438 MiB        1005       dist_traveled = 0
    40   65.766 MiB -83660.750 MiB        2178       while True:
    41   65.766 MiB -83660.891 MiB        2178           samp_sca = np.random.exponential(sca_length)
    42   65.766 MiB -83661.031 MiB        2178           samp_abs = np.random.exponential(abs_length)
    43   65.766 MiB -83661.047 MiB        2178           samp_dist = min(samp_sca, samp_abs)  # Distance until event
    44                                         
    45   65.766 MiB -83661.156 MiB        2178           dx = samp_dist * np.cos(angle)
    46   65.766 MiB -83661.250 MiB        2178           dy = samp_dist * np.sin(angle)
    47   65.766 MiB -83661.359 MiB        2178           prev_x, prev_y = traj_x[-1], traj_y[-1]
    48   65.766 MiB -83661.484 MiB        2178           new_x = prev_x + dx
    49   65.766 MiB -83661.641 MiB        2178           new_y = prev_y + dy
    50   65.766 MiB 59530.172 MiB        2178           traj_x, traj_y, update_time, index = update_traj(traj_x, traj_y, prev_x, prev_y, new_x, new_y, angle, v, sensor_centers, sensor_r, detec_x, detec_y)
    51   65.766 MiB -83707.016 MiB        2178           total_time += update_time
    52   65.766 MiB -83707.016 MiB        2178           dist_traveled += np.sqrt((new_x - prev_x) ** 2 + (new_y - prev_y) ** 2)
    53   65.766 MiB -83707.016 MiB        2178           if index >= -1:  # Meaning intersect or outside wall
    54   65.766 MiB -9778.266 MiB         253               return traj_x, traj_y, total_time, dist_traveled, index
    55   65.766 MiB -73928.734 MiB        1925           if samp_dist == samp_abs:  # Absorption
    56   65.766 MiB -28908.438 MiB         752               return traj_x, traj_y, total_time, dist_traveled, index
    57                                                 else:
    58   65.766 MiB 32120.750 MiB        1173               angle = update_photon_angle(angle, g, generator)


Filename: benchmark_script.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    60   65.766 MiB 59575.297 MiB        2178   @profile
    61                                         def update_traj(traj_x, traj_y, init_x, init_y, final_x, final_y, angle, v, sensor_centers, sensor_r, detec_x, detec_y):
    62   65.766 MiB -83662.047 MiB        2178       dis = np.sqrt((final_x - init_x) ** 2 + (final_y - init_y) ** 2)
    63   65.766 MiB -83662.125 MiB        2178       speed = v
    64   65.766 MiB -83662.156 MiB        2178       time = dis / speed
    65                                         
    66   65.766 MiB 59530.875 MiB        2178       intersect, index, inter_coords = check_intersection(init_x, init_y, final_x, final_y, sensor_centers, sensor_r, detec_x, detec_y)
    67   65.766 MiB -83706.438 MiB        2178       if intersect:
    68   65.766 MiB -9778.281 MiB         253           traj_x.append(inter_coords[0])
    69   65.766 MiB -9778.281 MiB         253           traj_y.append(inter_coords[1])
    70   65.766 MiB -9778.281 MiB         253           return traj_x, traj_y, time, index
    71                                         
    72   65.766 MiB -73928.328 MiB        1925       traj_x.append(final_x)
    73   65.766 MiB -73928.453 MiB        1925       traj_y.append(final_y)
    74   65.766 MiB -73928.609 MiB        1925       return traj_x, traj_y, time, -2


Filename: benchmark_script.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    76   65.766 MiB 59574.953 MiB        2178   @profile
    77                                         def check_intersection(prev_x, prev_y, curr_x, curr_y, sensor_centers, sensor_r, detec_x, detec_y):
    78   65.766 MiB 59531.531 MiB        2178       coords, index = check_sensors(prev_x, prev_y, curr_x, curr_y, sensor_centers, sensor_r)
    79   65.766 MiB -83705.797 MiB        2178       if index >= 0:
    80   65.766 MiB -3369.953 MiB          88           return True, index, coords
    81   65.766 MiB -80335.969 MiB        2090       elif (curr_x <= 0 or curr_x >= detec_x or curr_y <= 0 or curr_y >= detec_y):  # Outside walls
    82   65.766 MiB 4442.969 MiB         165           curr_x, curr_y = get_wall_coords(prev_x, prev_y, curr_x, curr_y, detec_x, detec_y)
    83   65.766 MiB -6408.328 MiB         165           return True, -1, (curr_x, curr_y)
    84                                         
    85   65.766 MiB -73927.797 MiB        1925       return False, -2, (0, 0)


Filename: benchmark_script.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    87   65.766 MiB 4442.953 MiB         165   @profile
    88                                         def get_wall_coords(prev_x, prev_y, curr_x, curr_y, detec_x, detec_y):
    89   65.766 MiB -6408.344 MiB         165       wall_boundaries = {'left': 0, 'right': detec_x, 'bottom': 0, 'top': detec_y}
    90   65.766 MiB -6408.344 MiB         165       intersects = []
    91                                         
    92   65.766 MiB -6408.344 MiB         165       if curr_x < wall_boundaries['left']:
    93   65.766 MiB -1810.750 MiB          47           t = (wall_boundaries['left'] - prev_x) / (curr_x - prev_x)
    94   65.766 MiB -1810.750 MiB          47           y_intersect = prev_y + t * (curr_y - prev_y)
    95   65.766 MiB -1810.750 MiB          47           if 0 <= t <= 1 and wall_boundaries['bottom'] <= y_intersect <= wall_boundaries['top']:
    96   65.766 MiB -1715.344 MiB          45               intersects.append((wall_boundaries['left'], y_intersect))
    97                                         
    98   65.766 MiB -6408.344 MiB         165       if curr_x > wall_boundaries['right']:
    99   65.766 MiB -2251.797 MiB          60           t = (wall_boundaries['right'] - prev_x) / (curr_x - prev_x)
   100   65.766 MiB -2251.797 MiB          60           y_intersect = prev_y + t * (curr_y - prev_y)
   101   65.766 MiB -2251.797 MiB          60           if 0 <= t <= 1 and wall_boundaries['bottom'] <= y_intersect <= wall_boundaries['top']:
   102   65.766 MiB -2099.469 MiB          55               intersects.append((wall_boundaries['right'], y_intersect))
   103                                         
   104   65.766 MiB -6408.344 MiB         165       if curr_y < wall_boundaries['bottom']:
   105   56.453 MiB -1120.984 MiB          27           t = (wall_boundaries['bottom'] - prev_y) / (curr_y - prev_y)
   106   56.469 MiB -869.531 MiB          27           x_intersect = prev_x + t * (curr_x - prev_x)
   107   56.469 MiB -869.953 MiB          27           if 0 <= t <= 1 and wall_boundaries['left'] <= x_intersect <= wall_boundaries['right']:
   108   56.469 MiB -793.031 MiB          25               intersects.append((x_intersect, wall_boundaries['bottom']))
   109                                         
   110   65.766 MiB -6157.312 MiB         165       if curr_y > wall_boundaries['top']:
   111   65.766 MiB -1663.391 MiB          42           t = (wall_boundaries['top'] - prev_y) / (curr_y - prev_y)
   112   65.766 MiB -1663.391 MiB          42           x_intersect = prev_x + t * (curr_x - prev_x)
   113   65.766 MiB -1663.391 MiB          42           if 0 <= t <= 1 and wall_boundaries['left'] <= x_intersect <= wall_boundaries['right']:
   114   65.766 MiB -1568.062 MiB          40               intersects.append((x_intersect, wall_boundaries['top']))
   115                                         
   116   65.766 MiB -6408.328 MiB         165       if intersects:
   117   65.766 MiB -6408.328 MiB         165           return intersects[0]
   118                                             else:
   119                                                 return curr_x, curr_y


Filename: benchmark_script.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   121   65.766 MiB 59575.109 MiB        2178   @profile
   122                                         def check_sensors(prev_x, prev_y, curr_x, curr_y, sensor_centers, sensor_r):
   123   65.766 MiB -8289057.125 MiB      215728       for i, (x_cent, y_cent) in enumerate(sensor_centers):
   124   65.766 MiB -8208725.953 MiB      213638           A = prev_x - x_cent
   125   65.766 MiB -8208730.188 MiB      213638           B = curr_x - prev_x
   126   65.766 MiB -8208733.625 MiB      213638           C = prev_y - y_cent
   127   65.766 MiB -8208737.438 MiB      213638           D = curr_y - prev_y
   128                                         
   129   65.766 MiB -8208741.000 MiB      213638           a = B ** 2 + D ** 2
   130   65.766 MiB -8208744.094 MiB      213638           b = 2 * (A * B + C * D)
   131   65.766 MiB -8208747.641 MiB      213638           c = A ** 2 + C ** 2 - sensor_r ** 2
   132                                         
   133   65.766 MiB -8208751.531 MiB      213638           discriminant = b ** 2 - 4 * a * c
   134                                         
   135   65.766 MiB -8208756.141 MiB      213638           if discriminant < 0:
   136   65.766 MiB -8166731.797 MiB      212575               continue 
   137                                         
   138   65.766 MiB -42028.750 MiB        1063           sqrt_discriminant = np.sqrt(discriminant)
   139                                         
   140   65.766 MiB -42028.734 MiB        1063           t1 = (-b - sqrt_discriminant) / (2 * a)
   141   65.766 MiB -42028.719 MiB        1063           t2 = (-b + sqrt_discriminant) / (2 * a)
   142                                         
   143   65.766 MiB -42028.719 MiB        1063           if (0 <= t1 <= 1) or (0 <= t2 <= 1):
   144   65.766 MiB -3369.953 MiB          88               return (x_cent, y_cent), i
   145                                         
   146   65.766 MiB -80335.406 MiB        2090       return False, -2


Filename: benchmark_script.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   148   65.766 MiB   65.391 MiB           6   @profile
   149                                         def run_simulation(n_trajs, detec_x, detec_y, sensor_d, n_sensors, g, emitter_coords):
   150   65.766 MiB    0.000 MiB           6       c = 3e8
   151   65.766 MiB    0.000 MiB           6       n_ice = 1.31
   152   65.766 MiB    0.000 MiB           6       c_ice = c / n_ice
   153                                         
   154   65.766 MiB    0.000 MiB           6       sensor_r = sensor_d / 2
   155                                         
   156   65.766 MiB    0.016 MiB           6       sensor_x = np.linspace(sensor_d, detec_x - sensor_d, int(np.sqrt(n_sensors)))
   157   65.766 MiB    0.000 MiB           6       sensor_y = np.linspace(sensor_d, detec_y - sensor_d, int(np.sqrt(n_sensors)))
   158                                         
   159   65.766 MiB    0.031 MiB           6       X, Y = np.meshgrid(sensor_x, sensor_y)
   160                                         
   161                                             # Sensor centers array
   162   65.766 MiB    0.000 MiB           6       sensor_centers = np.vstack([X.ravel(), Y.ravel()]).T
   163                                         
   164   65.766 MiB    0.000 MiB           6       traj_times = np.zeros(n_trajs)
   165   65.766 MiB    0.000 MiB           6       traj_dist = np.zeros(n_trajs)
   166   65.766 MiB    0.000 MiB           6       sensor_hits = []
   167   65.766 MiB    0.000 MiB           6       sensor_hit_times = []
   168   65.766 MiB    0.000 MiB           6       all_trajs_x = []
   169   65.766 MiB    0.000 MiB           6       all_trajs_y = []
   170                                         
   171   65.766 MiB    0.000 MiB           6       no_sensor_dist = []
   172   65.766 MiB    0.000 MiB           6       no_sensor_times = []
   173                                         
   174   65.766 MiB    0.000 MiB           6       sensor_hit_indices = []
   175                                         
   176   65.766 MiB    0.031 MiB           6       generator = np.random.default_rng()
   177                                         
   178   65.766 MiB -38686.297 MiB        1011       for i in range(n_trajs):
   179   65.766 MiB 27407.719 MiB        1005           traj_x, traj_y, final_time, dist_traveled, index = photon_emitter(np.random.uniform(0, 2 * np.pi), c_ice, 7, 11, init_coords=emitter_coords, sensor_centers=sensor_centers, sensor_r=sensor_r, g=g, generator=generator, detec_x=detec_x, detec_y=detec_y)
   180   65.766 MiB -38686.703 MiB        1005           traj_times[i] = final_time
   181   65.766 MiB -38686.688 MiB        1005           traj_dist[i] = dist_traveled
   182   65.766 MiB -38686.531 MiB        1005           all_trajs_x.append(traj_x)
   183   65.766 MiB -38686.469 MiB        1005           all_trajs_y.append(traj_y)
   184                                         
   185   65.766 MiB -38686.469 MiB        1005           if index >= 0:
   186   65.766 MiB -3369.875 MiB          88               sensor_hits.append(index)
   187   65.766 MiB -3369.844 MiB          88               sensor_hit_times.append(final_time)
   188   65.766 MiB -3369.844 MiB          88               sensor_hit_indices.append(i)
   189   65.766 MiB -38686.375 MiB        1005           if index < 0:
   190   65.766 MiB -35316.469 MiB         917               no_sensor_dist.append(dist_traveled)
   191   65.766 MiB -35316.453 MiB         917               no_sensor_times.append(final_time)
   192                                         
   193   65.766 MiB  -47.859 MiB           6       return traj_times, traj_dist, sensor_hits, sensor_hit_times, all_trajs_x, all_trajs_y, no_sensor_dist, no_sensor_times, sensor_hit_indices


